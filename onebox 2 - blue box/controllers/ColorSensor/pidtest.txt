from controller import Robot, Motor, Camera

class YouBotPIDLineFollower:
    def __init__(self):
        self.robot = Robot()
        self.timestep = int(self.robot.getBasicTimeStep())
        self.max_speed = 6.28  # Max speed for motors
        
        # Motors
        self.motors = []
        motor_names = ['wheel1', 'wheel2', 'wheel3', 'wheel4']
        for name in motor_names:
            motor = self.robot.getDevice(name)
            motor.setPosition(float('inf'))  # Set to velocity mode
            motor.setVelocity(0.0)
            self.motors.append(motor)
        
        # Camera
        self.camera = self.robot.getDevice('camera')
        self.camera.enable(self.timestep)
        self.camera_width = self.camera.getWidth()
        
        # PID parameters
        self.Kp = 0.1  # Reduced proportional gain
        self.Ki = 0.0  # No integral control
        self.Kd = 0.05  # Reduced derivative gain
        self.previous_error = 0
        self.integral = 0

    def get_line_error(self):
        image = self.camera.getImage()
        center = self.camera_width // 2
        line_position = None
        error = 0
        line_pixels = 0
        
        # Average error over a range of pixels (to reduce noise)
        for x in range(self.camera_width):  # Check a range in the middle of the image
            red = self.camera.imageGetRed(image, self.camera_width, x, 0)
            green = self.camera.imageGetGreen(image, self.camera_width, x, 0)
            blue = self.camera.imageGetBlue(image, self.camera_width, x, 0)
            
            if red < 50 and green < 50 and blue < 50:  # Detect black pixels (line)
                line_position = x
                error += (center - line_position)
                line_pixels += 1
        
        if line_pixels == 0:
            return None  # No line detected
        
        # Calculate the average error
        error /= line_pixels
        return error

    def pid_control(self, error):
        self.integral += error
        derivative = error - self.previous_error
        correction = self.Kp * error + self.Ki * self.integral + self.Kd * derivative
        self.previous_error = error
        return correction

    def set_motor_speeds(self, left_speed, right_speed):
        print(left_speed,right_speed)
        self.motors[0].setVelocity(left_speed)
        self.motors[1].setVelocity(right_speed)
        self.motors[2].setVelocity(left_speed)
        self.motors[3].setVelocity(right_speed)

    def run(self):
        while self.robot.step(self.timestep) != -1:
            error = self.get_line_error()
            if error is None:
                # Stop if no line is detected
                self.set_motor_speeds(0, 0)
                continue
            correction = self.pid_control(error)
            base_speed = self.max_speed / 2  # Base speed for both motors
            left_speed = base_speed - correction
            right_speed = base_speed + correction
            
            # Ensure speeds are within bounds
            left_speed = max(-self.max_speed, min(self.max_speed, left_speed))
            right_speed = max(-self.max_speed, min(self.max_speed, right_speed))
            
            self.set_motor_speeds(left_speed, right_speed)

if __name__ == "__main__":
    controller = YouBotPIDLineFollower()
    controller.run()
